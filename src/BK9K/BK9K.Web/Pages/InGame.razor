@page "/in-game"

@using BK9K.Web.Applications
@using BK9K.Game.Configuration
@using BK9K.Game.Events
@using BK9K.Game.Events.Cards
@using BK9K.Game.Events.Level
@using SystemsRx.Extensions
@using BK9K.Game.Events.Units
@using BK9K.Game.Levels
@using BK9K.Game.Units
@using BK9K.Mechanics.Types
@using BK9K.Mechanics.Units
@using System.Reactive.Linq

@implements IDisposable

@inject GameApplication GameApp
@inject GameState GameState
@inject GameConfiguration Configuration

<div class="container is-fluid">
    <div class="columns">
        <div class="column is-3">
            <CombatLogView />
        </div>

        <div class="column">
            <div>
                @if (!_didPlayerWin.HasValue)
                {
                    <LevelView Level="Level" OnUnitSelected="gameUnit => SelectedUnit = gameUnit"/>
                    <div>
                        <GameSpeed Configuration="@GameApp.GameConfiguration"/>
                    </div>
                }
                else
                {
                    <LevelFinishedView DidPlayerWin="_didPlayerWin" LevelId="_currentLevel" />
                }
            </div>
        </div>
        <div class="column is-four">
            @if (!_didPlayerWin.HasValue && SelectedUnit != null)
            {
                <UnitsSection Unit="SelectedUnit" />
            }
        </div>
    </div>
    <div class="player-cards">
        <div class="columns">
            @foreach (var card in GameState.PlayerCards)
            {
                <div class="column">
                    <GameCard Card="card" Draggable="true"></GameCard>
                </div>
            }
        </div>
    </div>
    <InteropProxy />
    <Modal IsActive="@ShowLevelUpModal" OnModalClosed="@OnLevelUpModalClosed">
        <Content>
            @if (SelectedUnit != null)
            {
                <UnitLeveledUpDetails Unit="@SelectedUnit.Unit" OnClosed="context"></UnitLeveledUpDetails>
            }
        </Content>
    </Modal>
</div>


@code
{
    private bool? _didPlayerWin = null;
    private int _currentLevel = 1;
    private List<IDisposable> _subs = new();

    public Level Level => GameApp.Level;
    public GameUnit SelectedUnit = null;
    public bool ShowLevelUpModal = false;
    public float _cachedGameSpeed = GameSpeedTypes.Default;

    protected override async Task OnInitializedAsync()
    {
        GameApp.EventSystem.Receive<LevelLoadedEvent>().Subscribe(OnLevelLoaded).AddTo(_subs);
        GameApp.EventSystem.Receive<RoundConcludedEvent>().Subscribe(OnRoundConcluded).AddTo(_subs);
        GameApp.EventSystem.Receive<LevelEndedEvent>().Subscribe(OnLevelEnded).AddTo(_subs);
        GameApp.EventSystem.Receive<UnitMovingEvent>().Subscribe(x => StateHasChanged()).AddTo(_subs);
        GameApp.EventSystem.Receive<PlayerCardsChangedEvent>().Subscribe(OnPlayerCardsChanged).AddTo(_subs);
        GameApp.EventSystem.Receive<UnitLeveledUpEvent>()
            .Where(x => x.Unit.FactionType == FactionTypes.Player)
            .Subscribe(OnUnitLeveledUp).AddTo(_subs);

        await LoadLevel(GameState.LevelId);
        Configuration.GameSpeed = GameSpeedTypes.Default;
    }

    public async Task LoadLevel(int loadDelay = 0)
    {
        await Task.Delay(loadDelay);
        GameApp.EventSystem.Publish(new RequestLevelLoadEvent(GameState.LevelId));
    }

    public void OnLevelLoaded(LevelLoadedEvent args)
    {
        _didPlayerWin = null;
        StateHasChanged();
    }

    public void OnPlayerCardsChanged(PlayerCardsChangedEvent args)
    {
        StateHasChanged();
    }

    public void OnRoundConcluded(RoundConcludedEvent args)
    {
        StateHasChanged();
    }

    public void OnUnitLeveledUp(UnitLeveledUpEvent args)
    {
        SelectedUnit = Level.GameUnits.First(x => x.Agent.OwnerContext.Id == args.Unit.Id);
        _cachedGameSpeed = Configuration.GameSpeed;
        Configuration.GameSpeed = GameSpeedTypes.Paused;
        ShowLevelUpModal = true;
        StateHasChanged();
    }

    public void OnLevelUpModalClosed()
    {
        Configuration.GameSpeed = _cachedGameSpeed;
        ShowLevelUpModal = false;
    }

    public void OnLevelEnded(LevelEndedEvent args)
    {
        _didPlayerWin = args.DidPlayerWin;
        _currentLevel = args.CurrentLevelId;
        StateHasChanged();

        if(args.DidPlayerWin)
        { Task.Run(() => LoadLevel(3000)); }
    }

    public void ResolveGame(LevelEndedEvent args)
    { _didPlayerWin = args.DidPlayerWin; }

    public void Dispose()
    { _subs.DisposeAll(); }
}
