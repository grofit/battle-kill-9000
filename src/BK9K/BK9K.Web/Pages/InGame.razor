@page "/in-game"
@using System
@using SystemsRx.Extensions
@using BK9K.Framework.Levels
@using BK9K.Framework.Units
@using BK9K.Game.Configuration
@using BK9K.Game.Events
@using BK9K.Game.Events.Level
@using BK9K.Web.Applications

@implements IDisposable

@inject GameApplication GameApp
@inject GameState GameState

<div class="container">
    <div class="columns">

        @if (!DidPlayerWin.HasValue)
        {
            <div class="column">
                <LevelView Level="Level" OnUnitSelected="(Unit unit) => SelectedUnit = unit" />
                <div>
                    <GameSpeed Configuration="@GameApp.GameConfiguration" />
                </div>
            </div>
            <div class="column is-two-fifths">
                @if (SelectedUnit != null)
                {
                    <BasicCharacter Character="SelectedUnit"></BasicCharacter>
                }
            </div>
        }
        else
        {
            <div class="column">
                <LevelFinishedView DidPlayerWin="DidPlayerWin" LevelId="CurrentLevel"></LevelFinishedView>
            </div>
        }

    </div>

    <div>
        <CombatLogView/>
    </div>

</div>


@code
{
    private bool? DidPlayerWin = null;
    private int CurrentLevel = 1;
    private List<IDisposable> _subs = new();

    public Level Level => GameApp.Level;
    public bool isLoaded = false;
    public Unit SelectedUnit = null;

    protected override async Task OnInitializedAsync()
    {
        GameApp.EventSystem.Receive<LevelLoadedEvent>().Subscribe(OnLevelLoaded).AddTo(_subs);
        GameApp.EventSystem.Receive<RoundConcludedEvent>().Subscribe(OnRoundConcluded).AddTo(_subs);
        GameApp.EventSystem.Receive<LevelEndedEvent>().Subscribe(OnLevelEnded).AddTo(_subs);
        await LoadLevel(GameState.LevelId);
    }

    public async Task LoadLevel(int loadDelay = 0)
    {
        await Task.Delay(loadDelay);
        GameApp.EventSystem.Publish(new RequestLevelLoadEvent(GameState.LevelId));
        DidPlayerWin = null;
    }

    public void OnLevelLoaded(LevelLoadedEvent args)
    {
        StateHasChanged();
    }

    public void OnRoundConcluded(RoundConcludedEvent args)
    {
        StateHasChanged();
    }

    public void OnLevelEnded(LevelEndedEvent args)
    {
        DidPlayerWin = args.DidPlayerWin;
        CurrentLevel = args.CurrentLevelId;
        StateHasChanged();

        if(args.DidPlayerWin)
        { LoadLevel(3000).Start(); }
    }

    public void ResolveGame(LevelEndedEvent args)
    { DidPlayerWin = args.DidPlayerWin; }

    public void Dispose()
    { _subs.DisposeAll(); }
}
