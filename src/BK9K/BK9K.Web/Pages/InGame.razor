@page "/in-game"
@using BK9K.Framework.Extensions
@using System
@using BK9K.Framework.Transforms
@using BK9K.Game
@using BK9K.Game.Events
@using BK9K.Web.Applications
@using EcsRx.Extensions

@implements IDisposable

@inject GameApplication GameApp

<div class="container">
    <div class="columns">

        @if (!DidPlayerWin.HasValue)
        {
            <div class="column">
                <LevelView World="World" />
                <div>
                    <GameSpeed Configuration="@GameApp.GameConfiguration" />
                </div>
            </div>
            <div class="column is-one-third">
                <p class="title">TEST STATS</p>
            </div>
        }
        else
        {
            <div class="column">
                <LevelFinishedView DidPlayerWin="DidPlayerWin"></LevelFinishedView>
            </div>
        }

    </div>

    <div class="output-log is-absolute box">
        <p class="title">COMBAT LOGS</p>
        @foreach (var log in Logs)
        {
            <p>@log</p>
        }
    </div>

</div>


@code
{
    private bool? DidPlayerWin = null;
    private List<string> Logs = new();
    private List<IDisposable> _subs = new();

    public World World => GameApp.World;
    public bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        GameApp.EventSystem.Receive<LevelLoadedEvent>().Subscribe(OnLevelLoaded).AddTo(_subs);
        GameApp.EventSystem.Receive<RoundConcludedEvent>().Subscribe(OnRoundConcluded).AddTo(_subs);
        GameApp.EventSystem.Receive<UnitAttackedEvent>().Subscribe(UnitHasAttacked).AddTo(_subs);
        GameApp.EventSystem.Receive<LevelEndedEvent>().Subscribe(OnLevelEnded).AddTo(_subs);
        GameApp.EventSystem.Publish(new RequestLevelLoadEvent(1));
    }

    public void OnLevelLoaded(LevelLoadedEvent args)
    {
        StateHasChanged();
    }

    public void OnRoundConcluded(RoundConcludedEvent args)
    {
        StateHasChanged();
    }

    public void OnLevelEnded(LevelEndedEvent args)
    {
        DidPlayerWin = args.DidPlayerWin;
        StateHasChanged();
    }

    public void UnitHasAttacked(UnitAttackedEvent args)
    { Logs.Add($"{args.Attacker.NameLocaleId} Attacked {args.Target.NameLocaleId} For {args.Damage} Damage"); }

    public void ResolveGame(LevelEndedEvent args)
    { DidPlayerWin = args.DidPlayerWin; }

    public void Dispose()
    { _subs.DisposeAll(); }
}
