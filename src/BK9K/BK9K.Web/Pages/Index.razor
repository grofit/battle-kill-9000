@page "/"
@using BK9K.Framework.Grids
@using BK9K.Framework.Units
@using BK9K.Framework.Extensions
@using System.Reactive.Linq
@using System
@using BK9K.Framework.Transforms
@using BK9K.Game
@using BK9K.Game.Events
@using Unit = System.Reactive.Unit

@implements IDisposable

@inject GridBuilder GridBuilder
@inject UnitBuilder UnitBuilder

<div>
    <p class="title">BATTLE GRID</p>
    @if (!DidPlayerWin.HasValue)
    {
        <section class="section">
            @for (var y = 0; y < World.Grid.YSize; y++)
            {
                <div>
                    @for (var x = 0; x < World.Grid.XSize; x++)
                    {
                        <div class="ground-tile is-relative">
                            <span class="grid-tag tag is-info">Pos [@x,@y]</span>
                            @{
                                var possibleUnit = World.GetUnitAt(new Position(x, y));
                                if (possibleUnit != null && !possibleUnit.IsDead())
                                {
                                    <UnitAvatar Unit="possibleUnit"/>
                                }
                            }
                        </div>
                    }
                </div>
            }
        </section>
    }
    else
    {
        <div>
            @if (DidPlayerWin.Value)
            { <p class="title has-text-success">CONGRATULATIONS YOU WON!!</p> }
            else
            { <p class="title has-text-danger">YOU DIED :(</p> }
        </div>
    }
    <div class="output-log is-absolute box">
        <p class="title">COMBAT LOGS</p>
        @foreach (var log in Logs)
        {
            <p>@log</p>
        }
    </div>
</div>

@code
{
    public GameBootstrap Game;
    public World World;
    private bool? DidPlayerWin = null;
    private List<string> Logs = new();
    private IDisposable _gameUpdateSub, _unitAttackedSub, _gameResolvedSub;

    protected override void OnInitialized()
    {
        World = new World();
        Game = new GameBootstrap();
        Game.StartGame();

        _gameUpdateSub = Game.OnUpdated.Subscribe(OnGameUpdated);
        _unitAttackedSub = World.OnUnitAttacked.Subscribe(UnitHasAttacked);
        _gameResolvedSub = World.OnGameResolved.Subscribe(ResolveGame);

        base.OnInitialized();
    }

    public void OnGameUpdated(long elapsed)
    {
        World.Update(elapsed);
        StateHasChanged();
    }

    public void UnitHasAttacked(UnitAttackedEvent args)
    { Logs.Add($"{args.Attacker.Name} Attacked {args.Target.Name} For {args.Damage} Damage"); }

    public void ResolveGame(GameResolvedEvent args)
    { DidPlayerWin = args.DidPlayerWin; }

    public void Dispose()
    {
        Game?.Dispose();
        _gameUpdateSub?.Dispose();
        _unitAttackedSub?.Dispose();
        _gameResolvedSub?.Dispose();
    }
}
