@using BK9K.Game.Data
@using BK9K.Game.Data.Extensions
@using BK9K.Game.Data.Repositories.Defaults
@using BK9K.Mechanics.Extensions
@using OpenRpg.Core.Effects
@using OpenRpg.Core.Requirements
@using OpenRpg.Genres.Fantasy.Characters
@using OpenRpg.Genres.Fantasy.Extensions
@using OpenRpg.Genres.Fantasy.Requirements
@using OpenRpg.Localization.Repositories


@inject ILocaleRepository LocaleRepository
@inject IRequirementChecker RequirementsChecker

@if (Effects != null && Effects.Count > 0)
{
    <div class="content is-small has-text-centered">
        @foreach (var effect in Effects)
        {
            var requirementsMet = AreAllRequirementsMet(effect);
            <li style="list-style: none;">
                <span class="effect-section @(effect.Potency > 0 ? "has-text-success" : "has-text-danger")">
                    <span class="@(requirementsMet ? "" : "is-strikethrough")">@GenerateEffectText(effect)</span>
                    @if (HasRequirements(effect))
                    {
                        <div class="requirement-section">
                            <RequirementList Character="Character" Requirements="effect.Requirements.ToArray()"></RequirementList>
                        </div>
                    }
                </span>
            </li>
        }
    </div>
}

@code {
    [Parameter]
    public IReadOnlyCollection<Effect> Effects { get; set; }

    [Parameter]
    public ICharacter Character { get; set; }

    public bool IsPercentageEffect(int effectType)
    { return effectType.IsPercentageEffect(); }

    public string GetEffectTypeText(int effectType)
    { return LocaleRepository.Retrieve(LocaleRepository.GetKeyFor(DefaultLocaleRepository.EffectTextKey, effectType)); }

    public string GenerateEffectText(Effect effect)
    {
        var isPercentageEffect = effect.IsPercentageEffect();
        var possiblePlus = (effect.Potency > 0) ? " +" : "";
        var possiblePercentage = isPercentageEffect ? "%" : "";
        return $"{GetEffectTypeText(effect.EffectType)} {possiblePlus}{effect.Potency}{possiblePercentage}";
    }

    public bool HasRequirements(Effect effect)
    {
        if (effect.Requirements == null)
        { return false; }

        if (!effect.Requirements.Any())
        { return false; }

        return true;
    }

    public bool AreAllRequirementsMet(Effect effect)
    {
        if (Character == null)
        { return true; }

        if (!HasRequirements(effect))
        { return true; }

        return RequirementsChecker.AreRequirementsMet(Character, effect);
    }

    public bool IsRequirementMet(Requirement requirement)
    { return RequirementsChecker.IsRequirementMet(Character, requirement); }

}