@using BK9K.Game
@using System.Numerics
@using BK9K.Game.Extensions
@using BK9K.Game.Levels
@using BK9K.Game.Units
@using BK9K.Mechanics.Extensions
@using BK9K.Mechanics.Units

<div>
    @for (var y = 0; y < Level.Grid.YSize; y++)
    {
        <div>
            @for (var x = 0; x < Level.Grid.XSize; x++)
            {
                <div class="ground-tile is-relative">
                    <span class="grid-tag tag is-info">Pos [@x,@y]</span>
                    @{
                        var possibleUnit = Level.GetUnitAt(new Vector2(x, y));
                        if (possibleUnit != null && !possibleUnit.Unit.IsDead())
                        {
                            <UnitAvatarView Unit="possibleUnit.Unit" OnUnitClick=@OnUnitClicked />
                        }
                    }
                </div>
            }
        </div>
    }
</div>

@code {

    [Parameter]
    public EventCallback<GameUnit> OnUnitSelected { get; set; }

    [Parameter]
    public Level Level { get; set; }

    public async Task OnUnitClicked(Unit unit)
    {
        var gameUnit = Level.GameUnits.Single(x => x.Unit.Id == unit.Id);
        await OnUnitSelected.InvokeAsync(gameUnit);
    }
}