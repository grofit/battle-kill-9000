@using SystemsRx.Events
@using SystemsRx.Extensions
@using BK9K.Game.Events.Units
@using System.Reactive.Linq
@using BK9K.Game.Events.Effects
@using BK9K.Mechanics.Extensions
@using BK9K.Mechanics.Types
@using BK9K.Mechanics.Types.Lookups
@using BK9K.Mechanics.Units
@using BK9K.Web.Types
@using OpenRpg.Genres.Fantasy.Extensions

@inject IEventSystem EventSystem
@implements IDisposable

<div class="unit-avatar @(_isActiveUnit ? "is-active": "") @(_isUnitAttacked ? "is-attacked" : "") @(_isUnitHealed ? "is-healed" : "")" 
     @onclick="() => OnUnitClick.InvokeAsync(Unit)" view-type="@ViewTypes.Unit" view-id="@Unit.Variables.UniqueId()"
     ondragenter="OnCardDragEnter(event)" ondragleave="OnCardDragLeave(event)" ondragover="OnDragOver(event)" ondrop="OnCardDrop(event)">
    @{ var className = GetClassName(Unit.Class.ClassTemplate.Id); }
    <span class="tag is-info @GetFactionClass(Unit.FactionType)">@Unit.NameLocaleId</span>
    <img class="@(_isBuffed ? "has-buffs" : "") @(_isDebuffed ? "has-debuff" : "")" src="./assets/sprites/@(className).png" alt="@className">
    <div class="tags has-addons">
        <span class="tag">
            <span class="icon">
                <i class="fas fa-heart"></i>
            </span>
        </span>
        <span class="tag is-danger">@Unit.Stats.Health()</span>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<Unit> OnUnitClick { get; set; }

    [Parameter]
    public Unit Unit { get; set; }

    private bool _isActiveUnit, _isUnitAttacked, _isUnitHealed, _isBuffed, _isDebuffed;

    private List<IDisposable> _sub = new();

    public string GetFactionClass(int factionType)
    {
        if(factionType == FactionTypes.Player) { return "is-success"; }
        if(factionType == FactionTypes.Enemy) { return "is-danger"; }
        return "";
    }

    public string GetClassName(int classType)
    {
        if (classType == ClassLookups.Mage) { return "mage"; }
        if (classType == ClassLookups.Rogue) { return "rogue"; }
        if (classType == ClassLookups.Fighter) { return "fighter"; }
        if (classType == ClassLookups.Priest) { return "priest"; }
        return "peasant";
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        EventSystem.Receive<UnitStartTurn>().Where(x => x.Unit == Unit).Subscribe(OnUnitTurnStarted).AddTo(_sub);
        EventSystem.Receive<UnitEndTurnEvent>().Subscribe(OnUnitTurnEnded).AddTo(_sub);
        EventSystem.Receive<UnitAttackedEvent>().Where(x => x.Target == Unit).Subscribe(OnUnitAttacked).AddTo(_sub);
        EventSystem.Receive<UnitHealedEvent>().Where(x => x.Target == Unit).Subscribe(OnUnitHealed).AddTo(_sub);
        EventSystem.Receive<EffectAddedEvent>().Where(x => x.Unit == Unit).Subscribe(OnUnitActiveEffectAdded).AddTo(_sub);
        EventSystem.Receive<EffectExpiredEvent>().Where(x => x.Unit == Unit).Subscribe(OnUnitActiveEffectRemoved).AddTo(_sub);
    }

    public void OnUnitTurnEnded(UnitEndTurnEvent args)
    {
        _isActiveUnit = false;
        _isUnitAttacked = false;
        _isUnitHealed = false;
        StateHasChanged();
    }

    public void OnUnitTurnStarted(UnitStartTurn args)
    {
        _isActiveUnit = true;
        StateHasChanged();
    }

    public void OnUnitAttacked(UnitAttackedEvent args)
    {
        _isUnitAttacked = true;
        StateHasChanged();
    }

    public void OnUnitHealed(UnitHealedEvent args)
    {
        _isUnitHealed = true;
        StateHasChanged();
    }

    public void OnUnitActiveEffectAdded(EffectAddedEvent args)
    {
        if (args.ActiveEffect.IsBeneficialEffect())
        { _isBuffed = true; }
        else
        { _isDebuffed = true; }
        StateHasChanged();
    }

    public void OnUnitActiveEffectRemoved(EffectExpiredEvent args)
    {
        if (args.ActiveEffect.IsBeneficialEffect())
        { _isBuffed = false; }
        else
        { _isDebuffed = false; }
        StateHasChanged();
    }

    public void Dispose()
    {
        _sub.DisposeAll();
    }

}