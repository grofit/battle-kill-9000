@using BK9K.Web.Applications
@using BK9K.Web.Types
@using BK9K.Game.Events.Cards
@using BK9K.Mechanics.Extensions
@using BK9K.Mechanics.Types

<span id="interop-handler"></span>

@implements IDisposable

@inject GameApplication GameApp
@inject IJSRuntime JSRuntime

@code
{
    DotNetObjectReference<InteropProxy> ObjectReference;

    [JSInvokable("ApplyCard")]
    public void ApplyCardToViewEntity(string cardId, string viewType, string viewId)
    {
        var cardGuid = Guid.Parse(cardId);
        var viewGuid = Guid.Parse(viewId);
        var card = GameApp.GameState.PlayerCards.Single(x => x.Variables.UniqueId() == cardGuid);

        if (int.Parse(viewType) == ViewTypes.Unit)
        {
            var unit = GameApp.Level.GameUnits.Single(x => x.Unit.Variables.UniqueId() == viewGuid);

            if (card.CardType != CardTypes.SpellCard)
            { GameApp.EventSystem.Publish(new CardUsedOnUnitEvent(card, unit.Unit)); }

            GameApp.EventSystem.Publish(new CardUsedOnTileEvent(card, unit.Unit.Position));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            ObjectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("interopProxy.exposeInterop", ObjectReference);
        }
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
        ObjectReference?.Dispose();
    }
}