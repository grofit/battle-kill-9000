@using BK9K.Game.Data
@using BK9K.Game.Data.Extensions
@using BK9K.Game.Data.Repositories
@using BK9K.Game.Data.Repositories.Defaults
@using BK9K.Mechanics.Extensions
@using BK9K.Mechanics.Types
@using BK9K.Mechanics.Units
@using OpenRpg.Cards
@using OpenRpg.Cards.Genres
@using OpenRpg.Combat.Abilities
@using OpenRpg.Core.Effects
@using OpenRpg.Genres.Fantasy.Extensions
@using OpenRpg.Genres.Fantasy.Types
@using OpenRpg.Localization.Repositories

@inject ILocaleRepository LocaleRepository
@inject IAbilityHandlerRepository AbilityHandlerRepository

<div class="container game-card" draggable="@Draggable.ToString().ToLower()" ondragstart="OnStartDragCard(event)" ondrag="OnDragging(event)" ondragend="OnEndDragCard(event)" card-type="@Card.CardType" view-id="@Card.Variables.UniqueId()">
    <div class="card @CardTypeClass">
        <div class="card-content">
            <div class="content has-text-centered">
                <h3 class="ribbon">
                    <p class="ribbon-content">@Card.NameLocaleId</p>
                </h3>
                <div class="card-body">
                    <div class="card-effects">
                        <EffectList Effects=@Card.Effects.ToArray()></EffectList>
                    </div>
                    @if (Card.CardType == CardTypes.EquipmentCard)
                    {
                        @if ((Card as EquipmentCard).Data.ItemTemplate.ItemType == ItemTypes.GenericWeapon)
                        {
                            <div class="box as-circle has-background-link-light">
                                <span class="is-size-4">
                                    @(GetMaximumDamagingEffect()?.Potency ?? 0)
                                </span>
                            </div>
                        }
                        else
                        {
                            <div class="box as-circle has-background-link-light">
                                <span class="is-size-4">
                                    @(GetMaximumDefensiveEffect()?.Potency ?? 0)
                                </span>
                            </div>
                        }
                    }

                    @if (Card.CardType == CardTypes.AbilityCard && AssociatedUnit != null)
                    {
                        <div class="box as-circle has-background-link-light">
                            <span class="is-size-4">@DamageNumber</span>
                        </div>
                    }
                </div>
                <div class="description-section">
                    <p>@Card.DescriptionLocaleId</p>
                </div>
                <span class="card-tag tag">@CardTypeText</span>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public ICard Card { get; set; }

    [Parameter]
    public bool Draggable { get; set; } = false;

    [Parameter]
    public Unit AssociatedUnit { get; set; } = null;

    public string CardTypeClass => $"card-type-{Card.CardType}";
    public string CardTypeText => LocaleRepository.Retrieve(LocaleRepository.GetKeyFor(DefaultLocaleRepository.CardTypesTextKey, Card.CardType));

    public int DamageNumber;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Card.CardType == CardTypes.AbilityCard && AssociatedUnit != null)
        { DamageNumber = (int)GetAverageAbilityDamageString(Card as AbilityCard); }
    }

    public float GetAverageAbilityDamageString(AbilityCard card)
    {
        var handler = AbilityHandlerRepository.Retrieve(card.Data.Id);
        var totalDamages = new List<float>();
        for (var i = 0; i < 5; i++)
        {
            var attack = handler.CalculateAttack(AssociatedUnit);
            totalDamages.Add(attack.Damages.Sum(x => x.Value));
        }
        return totalDamages.Average();
    }

    public bool IsHealEffect(int effectType)
    {
        return effectType == EffectTypes.LightDamageAmount ||
               effectType == EffectTypes.LightDamagePercentage ||
               effectType == EffectTypes.LightBonusAmount;
    }

    public Effect GetMaximumDamagingEffect()
    {
        return Card.Effects.Where(x => x.IsDamagingEffect() && !IsHealEffect(x.EffectType))
            .OrderByDescending(x => x.Potency)
            .FirstOrDefault();
    }

    public Effect GetMaximumDefensiveEffect()
    {
        return Card.Effects.Where(x => x.IsDefensiveEffect() && !IsHealEffect(x.EffectType))
            .OrderByDescending(x => x.Potency)
            .FirstOrDefault();
    }

}