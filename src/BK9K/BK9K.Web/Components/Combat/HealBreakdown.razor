@using BK9K.Game.Data
@using BK9K.Game.Data.Extensions
@using BK9K.Game.Data.Repositories.Defaults
@using BK9K.Mechanics.Types
@using BK9K.Mechanics.Units
@using OpenRpg.Combat.Processors
@using OpenRpg.Localization.Repositories

@inject ILocaleRepository LocaleRepository;

<div class="box">
    
    <div class="field is-grouped is-grouped-multiline">
        <div class="control">
            <span class="tag @GetFactionClass(Healer)">@Healer.NameLocaleId</span>
        </div>
        <span>&nbsp;Healed&nbsp;</span>
        <div class="control">
            <span class="tag @GetFactionClass(Target)">@GetTargetName()</span>
        </div>
    </div>

    <div class="field is-grouped is-grouped-multiline">
        @foreach (var damage in ProcessedAttack.DamageDone)
        {
            <div class="control">
                <span class="tags has-addons">
                    <span class="tag is-dark">
                        <span class="icon">
                            <i class="fas fa-heart"></i>
                        </span>
                        <span>@LocaleRepository.Retrieve(LocaleRepository.GetKeyFor(DefaultLocaleRepository.DamageTypesTextKey, damage.Type)).Replace("Damage", "").Replace("Light", "Heal")</span>
                    </span>
                    <span class="tag is-warning">@((int)Math.Round(damage.Value))</span>
                </span>
            </div>
        }
    </div>
    <div class="control">
        <div class="tags has-addons">
            <span class="tag is-dark">Total Heal</span>
            <span class="tag is-warning">@TotalHeal</span>
        </div>
    </div>
</div>

@code {

    public int TotalHeal => (int)Math.Round(ProcessedAttack.DamageDone.Sum(x => x.Value));

    [Parameter]
    public Unit Healer { get; set; }

    [Parameter]
    public Unit Target { get; set; }

    [Parameter]
    public ProcessedAttack ProcessedAttack { get; set; }

    public string GetTargetName()
    {
        if (Target.Id == Healer.Id)
        { return "Self"; }

        return Target.NameLocaleId;
    }

    public string GetFactionClass(Unit unit)
    { return unit.FactionType == FactionTypes.Player ? "is-success" : "is-danger"; }
}