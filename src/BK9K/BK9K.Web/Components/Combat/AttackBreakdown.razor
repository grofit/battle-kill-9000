@using BK9K.Framework.Units
@using OpenRpg.Combat.Processors
@using BK9K.Game.Data
@using BK9K.Game.Extensions
@using BK9K.Game.Types
@using OpenRpg.Localization.Repositories

@inject ILocaleRepository LocaleRepository;

<div class="box">
    
    <div class="field is-grouped is-grouped-multiline">
        <div class="control">
            <span class="tag @GetFactionClass(Attacker)">@Attacker.NameLocaleId</span>
        </div>
        <span>&nbsp;Attacked&nbsp;</span>
        <div class="control">
            <span class="tag @GetFactionClass(Defender)">@Defender.NameLocaleId</span>
        </div>
    </div>

    <div class="field is-grouped is-grouped-multiline">
        @foreach (var damage in ProcessedAttack.DamageDone)
        {
            <div class="control">
                <span class="tags has-addons">
                    <span class="tag is-dark">@LocaleRepository.Retrieve(LocaleRepository.GetKeyFor(DefaultLocaleRepository.DamageTypesTextKey, damage.Type))</span>
                    <span class="tag is-warning">@damage.Value</span>
                </span>
            </div>
            <span>&nbsp;+&nbsp;</span>
        }
    </div>
    
    <div class="field is-grouped is-grouped-multiline">
        @foreach (var defense in ProcessedAttack.DamageDefended)
        {
            <div class="control">
                <div class="tags has-addons">
                    <span class="tag is-dark">@LocaleRepository.Retrieve(LocaleRepository.GetKeyFor(DefaultLocaleRepository.DamageTypesTextKey, defense.Type)).Replace("Damage", "Defense")</span>
                    <span class="tag is-info">@defense.Value</span>
                </div>
            </div>
            <span>&nbsp;-&nbsp;</span>
        }
    </div>
    <div class="control">
        <div class="tags has-addons">
            <span class="tag is-dark">Total Damage</span>
            <span class="tag is-warning">@TotalDamage</span>
        </div>
    </div>
</div>

@code {

    public int TotalDamage => (int)ProcessedAttack.DamageDone.Sum(x => x.Value);

    [Parameter]
    public Unit Attacker { get; set; }

    [Parameter]
    public Unit Defender { get; set; }

    [Parameter]
    public ProcessedAttack ProcessedAttack { get; set; }

    public string GetFactionClass(Unit unit)
    { return unit.FactionType == FactionTypes.Player ? "is-success" : "is-danger"; }
}